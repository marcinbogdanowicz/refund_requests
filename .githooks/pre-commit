#!/usr/bin/bash


# Ensure that .env and env.example files have the same keys, if both exist
if [ -f ./docker/.env ] && [ -f ./docker/.env.example ]; then
  echo "Checking .env and .env.example files..."

  env_keys=$(grep -v '^#' ./docker/.env | grep -v '^$' | cut -d'=' -f1 | sort)
  example_keys=$(grep -v '^#' ./docker/.env.example | grep -v '^$' | cut -d'=' -f1 | sort)

  diff_output=$(diff <(echo "$env_keys") <(echo "$example_keys"))
  if [ $? -ne 0 ]; then
      echo "Error: .env and .env.example files have different keys:"
      echo "$diff_output"
      echo "Please update the files to match."
      exit 1
  fi
fi


# autoflake
echo "Checking unused imports and variables with autoflake..."
CHECK="python -m autoflake --in-place"
python_files_to_check=$(git diff --cached --name-only --diff-filter=d | grep -E '\.(py)$' | tr '\n' ' ')

status=0
for file in $python_files_to_check; do
  committed_content=$(cat "$file")

  $CHECK "$file" || status=1

  if [ "$(cat "$file")" != "$committed_content" ]; then
    echo "Autoflake removed unused imports in $file. Staging the file."
    git add "$file"
  fi
done

if [ "$status" != 0 ]; then
  exit $status
fi

# black
echo "Checking code with black..."
CHECK="python -m black --config=./pyproject.toml"
python_files_to_check=$(git diff --cached --name-only --diff-filter=d | grep -E '\.(py)$' | grep -v '/migrations/' | tr '\n' ' ')

status=0
for file in $python_files_to_check; do
  committed_content=$(cat "$file")

  $CHECK "$file" || status=1

  if [ "$(cat "$file")" != "$committed_content" ]; then
    echo "Black formated code in $file. Staging the file."
    git add "$file"
  fi
done

if [ "$status" != 0 ]; then
  exit $status
fi


# flake8
echo "Checking code with flake8..."
CHECK="python -m flake8"
python_files_to_check=$(git diff --cached --name-only --diff-filter=d | grep -E '\.(py)$' | tr '\n' ' ')

status=0
for file in $python_files_to_check; do
  $CHECK "$file" || status=1
done

if [ "$status" != 0 ]; then
  exit $status
fi


# isort
echo "Checking imports with isort..."
CHECK="python -m isort --settings-file=./pyproject.toml"
python_files_to_check=$(git diff --cached --name-only --diff-filter=d | grep -E '\.(py)$' | tr '\n' ' ')

status=0
for file in $python_files_to_check; do
  committed_content=$(cat "$file")

  $CHECK "$file" || status=1

  if [ "$(cat "$file")" != "$committed_content" ]; then
    echo "isort sorted imports in $file. Staging the file."
    git add "$file"
  fi
done

if [ "$status" != 0 ]; then
  exit $status
fi
